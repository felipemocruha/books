// Code generated by protoc-gen-go. DO NOT EDIT.
// source: book.proto

/*
Package book is a generated protocol buffer package.

It is generated from these files:
	book.proto

It has these top-level messages:
	BookRequest
	BookResponse
	BookFilter
*/
package book

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BookRequest struct {
	Isbn       string                  `protobuf:"bytes,1,opt,name=isbn" json:"isbn,omitempty"`
	Title      string                  `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Borrowed   bool                    `protobuf:"varint,3,opt,name=borrowed" json:"borrowed,omitempty"`
	BorrowedBy string                  `protobuf:"bytes,4,opt,name=borrowed_by,json=borrowedBy" json:"borrowed_by,omitempty"`
	Categories []*BookRequest_Category `protobuf:"bytes,5,rep,name=categories" json:"categories,omitempty"`
}

func (m *BookRequest) Reset()                    { *m = BookRequest{} }
func (m *BookRequest) String() string            { return proto.CompactTextString(m) }
func (*BookRequest) ProtoMessage()               {}
func (*BookRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BookRequest) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

func (m *BookRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BookRequest) GetBorrowed() bool {
	if m != nil {
		return m.Borrowed
	}
	return false
}

func (m *BookRequest) GetBorrowedBy() string {
	if m != nil {
		return m.BorrowedBy
	}
	return ""
}

func (m *BookRequest) GetCategories() []*BookRequest_Category {
	if m != nil {
		return m.Categories
	}
	return nil
}

type BookRequest_Category struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
}

func (m *BookRequest_Category) Reset()                    { *m = BookRequest_Category{} }
func (m *BookRequest_Category) String() string            { return proto.CompactTextString(m) }
func (*BookRequest_Category) ProtoMessage()               {}
func (*BookRequest_Category) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *BookRequest_Category) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BookRequest_Category) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

type BookResponse struct {
	Isbn    string `protobuf:"bytes,1,opt,name=isbn" json:"isbn,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *BookResponse) Reset()                    { *m = BookResponse{} }
func (m *BookResponse) String() string            { return proto.CompactTextString(m) }
func (*BookResponse) ProtoMessage()               {}
func (*BookResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BookResponse) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

func (m *BookResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BookFilter struct {
	Isbn   string `protobuf:"bytes,1,opt,name=isbn" json:"isbn,omitempty"`
	Search string `protobuf:"bytes,2,opt,name=search" json:"search,omitempty"`
}

func (m *BookFilter) Reset()                    { *m = BookFilter{} }
func (m *BookFilter) String() string            { return proto.CompactTextString(m) }
func (*BookFilter) ProtoMessage()               {}
func (*BookFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BookFilter) GetIsbn() string {
	if m != nil {
		return m.Isbn
	}
	return ""
}

func (m *BookFilter) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func init() {
	proto.RegisterType((*BookRequest)(nil), "book.BookRequest")
	proto.RegisterType((*BookRequest_Category)(nil), "book.BookRequest.Category")
	proto.RegisterType((*BookResponse)(nil), "book.BookResponse")
	proto.RegisterType((*BookFilter)(nil), "book.BookFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Book service

type BookClient interface {
	GetBooks(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (Book_GetBooksClient, error)
	CreateBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	UpdateBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	RemoveBook(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (*BookResponse, error)
	GetBook(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (*BookRequest, error)
	SearchBook(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (Book_SearchBookClient, error)
}

type bookClient struct {
	cc *grpc.ClientConn
}

func NewBookClient(cc *grpc.ClientConn) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) GetBooks(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (Book_GetBooksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Book_serviceDesc.Streams[0], c.cc, "/book.Book/GetBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookGetBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Book_GetBooksClient interface {
	Recv() (*BookRequest, error)
	grpc.ClientStream
}

type bookGetBooksClient struct {
	grpc.ClientStream
}

func (x *bookGetBooksClient) Recv() (*BookRequest, error) {
	m := new(BookRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookClient) CreateBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := grpc.Invoke(ctx, "/book.Book/CreateBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UpdateBook(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := grpc.Invoke(ctx, "/book.Book/UpdateBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) RemoveBook(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (*BookResponse, error) {
	out := new(BookResponse)
	err := grpc.Invoke(ctx, "/book.Book/RemoveBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBook(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (*BookRequest, error) {
	out := new(BookRequest)
	err := grpc.Invoke(ctx, "/book.Book/GetBook", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) SearchBook(ctx context.Context, in *BookFilter, opts ...grpc.CallOption) (Book_SearchBookClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Book_serviceDesc.Streams[1], c.cc, "/book.Book/SearchBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookSearchBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Book_SearchBookClient interface {
	Recv() (*BookRequest, error)
	grpc.ClientStream
}

type bookSearchBookClient struct {
	grpc.ClientStream
}

func (x *bookSearchBookClient) Recv() (*BookRequest, error) {
	m := new(BookRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Book service

type BookServer interface {
	GetBooks(*BookFilter, Book_GetBooksServer) error
	CreateBook(context.Context, *BookRequest) (*BookResponse, error)
	UpdateBook(context.Context, *BookRequest) (*BookResponse, error)
	RemoveBook(context.Context, *BookFilter) (*BookResponse, error)
	GetBook(context.Context, *BookFilter) (*BookRequest, error)
	SearchBook(*BookFilter, Book_SearchBookServer) error
}

func RegisterBookServer(s *grpc.Server, srv BookServer) {
	s.RegisterService(&_Book_serviceDesc, srv)
}

func _Book_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServer).GetBooks(m, &bookGetBooksServer{stream})
}

type Book_GetBooksServer interface {
	Send(*BookRequest) error
	grpc.ServerStream
}

type bookGetBooksServer struct {
	grpc.ServerStream
}

func (x *bookGetBooksServer) Send(m *BookRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _Book_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).CreateBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UpdateBook(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_RemoveBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).RemoveBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/RemoveBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).RemoveBook(ctx, req.(*BookFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.Book/GetBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBook(ctx, req.(*BookFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_SearchBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BookFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServer).SearchBook(m, &bookSearchBookServer{stream})
}

type Book_SearchBookServer interface {
	Send(*BookRequest) error
	grpc.ServerStream
}

type bookSearchBookServer struct {
	grpc.ServerStream
}

func (x *bookSearchBookServer) Send(m *BookRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _Book_serviceDesc = grpc.ServiceDesc{
	ServiceName: "book.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _Book_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _Book_UpdateBook_Handler,
		},
		{
			MethodName: "RemoveBook",
			Handler:    _Book_RemoveBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _Book_GetBook_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooks",
			Handler:       _Book_GetBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchBook",
			Handler:       _Book_SearchBook_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "book.proto",
}

func init() { proto.RegisterFile("book.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4f, 0xc2, 0x40,
	0x14, 0x84, 0x69, 0x29, 0x50, 0x07, 0x63, 0x74, 0x63, 0x4c, 0xd3, 0x8b, 0xa4, 0x27, 0x4e, 0x84,
	0x80, 0x1a, 0x63, 0x3c, 0x41, 0xa2, 0xf7, 0x35, 0x9e, 0x0d, 0x6d, 0x5f, 0xb4, 0x01, 0x59, 0xdc,
	0x5d, 0x34, 0xfd, 0x87, 0xfe, 0x14, 0x7f, 0x86, 0xd9, 0xdd, 0x16, 0x49, 0xe0, 0x20, 0xb7, 0x37,
	0x2f, 0xf3, 0xbd, 0xce, 0x34, 0x0b, 0xa4, 0x42, 0xcc, 0x07, 0x2b, 0x29, 0xb4, 0x60, 0x81, 0x99,
	0x93, 0x1f, 0x0f, 0xdd, 0x89, 0x10, 0x73, 0x4e, 0x1f, 0x6b, 0x52, 0x9a, 0x31, 0x04, 0x85, 0x4a,
	0x97, 0x91, 0xd7, 0xf3, 0xfa, 0x47, 0xdc, 0xce, 0xec, 0x1c, 0x2d, 0x5d, 0xe8, 0x05, 0x45, 0xbe,
	0x5d, 0x3a, 0xc1, 0x62, 0x84, 0xa9, 0x90, 0x52, 0x7c, 0x51, 0x1e, 0x35, 0x7b, 0x5e, 0x3f, 0xe4,
	0x1b, 0xcd, 0x2e, 0xd1, 0xad, 0xe7, 0x97, 0xb4, 0x8c, 0x02, 0xcb, 0xa1, 0x5e, 0x4d, 0x4a, 0x76,
	0x07, 0x64, 0x33, 0x4d, 0xaf, 0x42, 0x16, 0xa4, 0xa2, 0x56, 0xaf, 0xd9, 0xef, 0x8e, 0xe2, 0x81,
	0x4d, 0xb7, 0x95, 0x66, 0x30, 0x75, 0x9e, 0x92, 0x6f, 0xb9, 0xe3, 0x1b, 0x84, 0xf5, 0x9e, 0x9d,
	0xc0, 0x2f, 0x72, 0x1b, 0xb6, 0xc5, 0xfd, 0x22, 0x37, 0xa1, 0x2a, 0x67, 0x59, 0xa5, 0xdd, 0xe8,
	0xe4, 0x1e, 0xc7, 0xee, 0xb6, 0x5a, 0x89, 0xa5, 0xa2, 0xbd, 0x55, 0x23, 0x74, 0xd4, 0x3a, 0xcb,
	0x48, 0x29, 0x8b, 0x87, 0xbc, 0x96, 0xc9, 0x2d, 0x60, 0xe8, 0x87, 0x62, 0xa1, 0x49, 0xee, 0x65,
	0x2f, 0xd0, 0x56, 0x34, 0x93, 0xd9, 0x5b, 0xf5, 0xe5, 0x4a, 0x8d, 0xbe, 0x7d, 0x04, 0x06, 0x65,
	0x63, 0x84, 0x8f, 0xa4, 0xcd, 0xa8, 0xd8, 0xe9, 0x5f, 0x59, 0x77, 0x32, 0x3e, 0xdb, 0xa9, 0x9f,
	0x34, 0x86, 0x1e, 0xbb, 0x06, 0xa6, 0x92, 0x66, 0x9a, 0xec, 0x89, 0x5d, 0x53, 0xcc, 0xb6, 0x57,
	0xae, 0x5a, 0xd2, 0x30, 0xd8, 0xf3, 0x2a, 0x3f, 0x18, 0xbb, 0x02, 0x38, 0xbd, 0x8b, 0x4f, 0x87,
	0xed, 0x86, 0xdc, 0x4f, 0x0d, 0xd1, 0xa9, 0x8a, 0xfd, 0xb3, 0x97, 0x89, 0xf7, 0x64, 0xff, 0xce,
	0x01, 0xd0, 0xd0, 0x4b, 0xdb, 0xf6, 0xe9, 0x8e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x89, 0xaf,
	0xb0, 0xac, 0xc8, 0x02, 0x00, 0x00,
}
